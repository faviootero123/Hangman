@page "/hangman"
@using Microsoft.EntityFrameworkCore
@using crumbs.Data
@implements IDisposable


@inject IJSRuntime jsRuntime
@inject IDbContextFactory<HangmanDbContext> DbFactory
@inject NavigationManager NavManager
@inject IHttpContextAccessor Accessor

<PageTitle>Hangman!</PageTitle>
<MudGrid>
    <MudItem xs="12" sm="9">
        <MudPaper>
            <MudForm style="padding: 25px;">
                    <h1 style="text-align:center">Welcome to the Hangman Game!</h1>
                    <img id="imageGame" style="display:none;" src="@imageSource" />
                    <p id="descriptionGame" style="padding:25px; text-align:center;">Hangman is an old school favorite, a word game where the goal is simply to find the missing word or words. 
                      You will be presented with a number of blank spaces representing the missing letters you need to find. <br /> Use the keyboard to guess a letter (I recommend starting with vowels). 
                      If your chosen letter exists in the answer, then all places in the answer where that letter appear will be revealed. <br /> After you've revealed several letters, you may be able to guess what the answer 
                      is and fill in the remaining letters. Be warned, every time you guess a letter wrong you lose a life and the hangman begins to appear, piece by piece. <br />Solve the puzzle before the hangman dies.
                    </p>

                    <MudItem xs="1" sm="1" style="display:none;" id="counterDiv">
                        <MudField id="counter" FullWidth="true" Variant="Variant.Text" style="display:none;">@counter</MudField>
                    </MudItem>
                    <MudField id="numberToGuess" FullWidth="true" Variant="Variant.Text" style="display:none;">@underlines</MudField>
                    <MudField id="incorrectGuess" FullWidth="true" Variant="Variant.Text" style="display:none;">Incorrect Letters<br> @wrongletters</MudField>
                    <MudField id="prompt" Variant="Variant.Text" style="display:none;" DisableUnderLine="true">Enter Letter: </MudField>  
                    <MudItem xs="1" sm="1" style="display:none;" id="userletterDiv">            
                        <MudTextField id="userLetter" @bind-Value="letter" Variant="Variant.Text" MaxLength="1"></MudTextField>  
                    </MudItem>
                    <MudButton id="startGame" Variant="Variant.Filled" style="padding:10px; margin-left: auto; margin-right: auto; display:block" Color="Color.Primary" DisableElevation="true" OnClick="StartGame">Start!</MudButton>
                    <MudButton id="submitLetter" Variant="Variant.Filled" style="display:none;" Color="Color.Primary" DisableElevation="true" OnClick="GuessLetter">Submit!</MudButton>
                    <MudButton id="newGame" Variant="Variant.Filled" style="display:none;" Color="Color.Primary" DisableElevation="true" OnClick="StartGame">Play again!</MudButton>
            </MudForm>   
        </MudPaper>
    </MudItem>
</MudGrid>

@code {

    // TO DO:
    //      Generate goal word from db
    //      Force input to be alphabetic, non-numeric non-symbolic
    //      Losing
    //          ending the game/disallowing more guesses when user loses
    //      Winning
    //          ending the game when the word is guessed
    //          adding to the highscore table
    //      Previous guess bank? 
    //          Disallow re-guessing letters?

    private int numberGuess = 0;
    private string? imageSource = $"images/0.jpg";
    private string letter { get; set; }
    private string underlines = "";
    private string wrongletters = "";
    private HangmanDbContext HangmanDb {get; set;}
    private Word[] wordArr;
    private string currentWord;
    private Random rnd = new Random();
    private List<char> wrongGuesses = new List<char>();
    private List<char> allGuesses = new List<char>();
    private int counter = 0;

    private async void StartGame(){
        SetWord();
        numberGuess = 0;
        counter = 0;
        imageSource = $"images/0.jpg";
        wrongletters = "";
        wrongGuesses.Clear();
        allGuesses.Clear(); 
        await jsRuntime.InvokeAsync<object>("accessDOMElement");
    }

    private async void NewGame(){
        await jsRuntime.InvokeAsync<object>("endGameScreen");
    }

    private void SetWord(){
        wordArr = HangmanDb.Words.ToArray();
        int index = rnd.Next(0, 133);
        currentWord = wordArr[index].WordString;
        underlines = string.Concat(Enumerable.Repeat(" - ", currentWord.Length));
    }

    protected override async Task OnInitializedAsync(){
        HangmanDb = await DbFactory.CreateDbContextAsync();
        //WordsParse();
    }

    private void GuessLetter(){
        if (string.IsNullOrEmpty(letter) || int.TryParse(letter, out _ )) return;

        if (allGuesses.Contains(char.Parse(letter)))
        {
            return;
        }
        allGuesses.Add(char.Parse(letter));
        
        counter++;
        if (currentWord.Contains(letter, StringComparison.CurrentCultureIgnoreCase)){
            int position = 0;
            var replacement = underlines.ToCharArray();

            while (true){
                position = currentWord.IndexOf(letter, position, StringComparison.CurrentCultureIgnoreCase);
                if (position > -1){
                    replacement[1 + (3 * position)] = char.Parse(letter);
                } else{
                    break;
                }
                position++;
            }
            underlines = string.Join("",replacement);

            if (!(underlines.Contains("-", StringComparison.CurrentCultureIgnoreCase))){
                //the game was won
                letter = "";
                HangmanDb.Highscores.Add(new Highscore { Username = @Accessor.HttpContext.User.Identity.Name, Score = counter });
                HangmanDb.SaveChanges();
                ShowImage(12);
                NewGame();
            } 
        } else{
            //guess was not in answer
            wrongGuesses.Add(char.Parse(letter));
            wrongletters = string.Join(" ", wrongGuesses);
            IncrementGuess(); 
        }      
    }

    private void IncrementGuess(){
        numberGuess++;

        //check if the game was lost
        if (numberGuess == 10){
            letter = "";
            underlines = "";
            currentWord = currentWord.ToUpper();
            underlines = "Sorry you lost, try again! The correct word was: " + currentWord + "!";
            ShowImage(11);
            NewGame();
        } else{
            ShowImage(numberGuess);
        }
    }

    private void ShowImage(int id){
        imageSource = $"images/{id}.jpg";
    }
    
    public void Dispose()
    {
        HangmanDb?.Dispose();
    }

    //unless im mistaken there are only 140 words here, not 200 -MurMaed- You lied
    public string Words = @"children,fellow,piano,account,attempt,perfectly,taken,not,everything,future,trace,eager,paid,shop,determine,blanket,wing,setting,sign,nearest,
    day,before,adventure,completely,does,right,ourselves,remarkable,poet,vessels,vapor,lift,believed,dug,water,written,feel,yet,not,his,
    fell,simply,atom,secret,package,repeat,aside,solution,studying,funny,night,post,bill,laid,army,note,clock,successful,nor,union,
    cream,object,jungle,sell,particular,concerned,create,rough,nobody,waste,help,action,floating,arrow,country,recently,broke,arrow,skill,dry,
    wild,rays,scientific,remain,audience,touch,mother,recently,graph,goose,completely,love,laugh,principal,circle,basis,though,model,control,date,
    red,fear,function,open,list,not,move,business,printed,history,drove,headed,fourth,salmon,cell,medicine,did,beside,clothing,forgotten,
    compound,model,wind,cage,closely,sense,smell,thrown,continued,building,grown,sit,poetry,sight,noise,whose,piano,giving,peace,buffalo";

    public void WordsParse(){
        var splitWordList= Words.Split(',').ToList();
        List<Word> toBeStored = new List<Word>();
        foreach (var word in splitWordList){
            toBeStored.Add(new Word(){ WordString = word});
        }
        HangmanDb.Words.AddRange(toBeStored);
        HangmanDb.SaveChanges();
    }
}